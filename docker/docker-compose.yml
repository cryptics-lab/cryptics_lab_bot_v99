---
version: '2'
# Add BuildKit configuration
x-buildkit-config: &buildkit-config
  context: ..
  dockerfile: docker/Dockerfile.pipeline
  args:
    BUILDKIT_INLINE_CACHE: 1
services:
  zk:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zk
    container_name: zk
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - localnet
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  broker0:
    image: confluentinc/cp-kafka:6.1.1
    hostname: broker0
    container_name: broker0
    depends_on:
      - zk
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: 'zk:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - localnet
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server=localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  broker1:
    image: confluentinc/cp-kafka:6.1.1
    hostname: broker1
    container_name: broker1
    depends_on:
      - zk
    ports:
      - "29093:29093"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zk:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker1:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - localnet
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server=localhost:9093 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  broker2:
    image: confluentinc/cp-kafka:6.1.1
    hostname: broker2
    container_name: broker2
    depends_on:
      - zk
    ports:
      - "29094:29094"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zk:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker2:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_NUM_PARTITIONS: 3
    networks:
      - localnet
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server=localhost:9094 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker0
      - broker1
      - broker2
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker0:29092,broker1:29093,broker2:29094'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - localnet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.1.4
    container_name: kafka-connect
    hostname: kafka-connect
    depends_on:
      - broker0
      - broker1
      - broker2
      - schema-registry
      - timescaledb
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker0:29092,broker1:29093,broker2:29094"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/data/connect-jars
    volumes:
      - ./kafka-connect-plugins:/data/connect-jars
    command:
      - bash
      - -c
      - |
        echo "Installing connector plugins"
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:1.9.3
        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.6.0
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run
    networks:
      - localnet
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 45s

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.1.1
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker0
      - broker1
      - broker2
      - schema-registry
      - kafka-connect
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker0:29092,broker1:29093,broker2:29094'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zk:2181'
      CONTROL_CENTER_CONNECT_CLUSTER: 'kafka-connect:8083'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONTROL_CENTER_REPLICATION_FACTOR: 3
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 3
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 3
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 2
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: 960000
      CONFLUENT_METRICS_TOPIC_REPLICATION: 3
      PORT: 9021
    networks:
      - localnet

  cli-tools:
    image: confluentinc/cp-kafka:6.1.1
    container_name: cli-tools
    entrypoint: "sleep infinity"
    restart: always
    networks:
      - localnet

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    hostname: timescaledb
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql
    networks:
      - localnet
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  timescaledb-test:
    image: timescale/timescaledb:latest-pg15
    hostname: timescaledb-test
    container_name: timescaledb-test
    ports:
      - "${DB_TEST_PORT}:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_TEST_NAME}
    volumes:
      - timescaledb-test-data:/var/lib/postgresql/data
      # No init script - migrations will be applied by the Python pipeline
    networks:
      - localnet
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_TEST_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    depends_on:
      - timescaledb
      - timescaledb-test
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    networks:
      - localnet

  python-pipeline:
    build:
      <<: *buildkit-config
    container_name: cryptics-python-pipeline
    depends_on:
      broker0:
        condition: service_healthy
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      kafka-connect:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      timescaledb-test:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=1
      - python_running_in_docker=true
    volumes:
      # For development, mount these as volumes for quick iteration
      - ../python_pipeline/src:/app/src
      - ../python_pipeline/pyproject.toml:/app/pyproject.toml
      - ../python_pipeline/setup.py:/app/setup.py
      - ../schemas:/app/schemas
      - ../migrations:/app/migrations
      - ../config.toml:/app/config.toml
      - pip-cache:/root/.cache  # Add pip/uv cache volume
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - localnet

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      timescaledb:
        condition: service_healthy
      python-pipeline:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_PATHS_PROVISIONING: /etc/grafana/provisioning
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/configure_dashboards.sh:/etc/grafana/provisioning/dashboards/configure_dashboards.sh
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - localnet

  rust-bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile.rust
    container_name: cryptics-rust-bot
    depends_on:
      grafana:
        condition: service_healthy
      broker0:
        condition: service_healthy
      broker1:
        condition: service_healthy
      broker2:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    environment:
      - rust_running_in_docker=true
    restart: always
    networks:
      - localnet

networks:
  localnet:
    attachable: true

volumes:
  timescaledb-data:
  timescaledb-test-data:
  grafana-data:
  pip-cache:  # Add pip cache volume